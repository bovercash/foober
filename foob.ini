#include <Wire.h>
#include <Servo.h>

#define SERVO_X_PIN 9
#define SERVO_Y_PIN 10
#define LASER_TRIGGER_PIN 8

#define NUNCHUK_ADDRESS 0x52

struct Nunchuk {
  uint8_t posX;
  uint8_t posY;
  bool btnC;
  bool btnZ;
};

Servo servoX;
Servo servoY;
Nunchuk nunchuk;

void setup() {
  Serial.begin(9600);
  Serial.println("Starting...");
  initNunchuk();
  servoX.attach(SERVO_X_PIN);
  servoY.attach(SERVO_Y_PIN);
  pinMode(LASER_TRIGGER_PIN, OUTPUT);

  Serial.println("Started");
}

void loop() {
    nunchuk = readNunchuk();

    uint8_t posx = adjustToServoPosition(nunchuk.posX);
    uint8_t posY = adjustToServoPosition(nunchuk.posY);

    if(nunchuk.btnZ){
        digitalWrite(LASER_TRIGGER_PIN, HIGH);
    } else {
        digitalWrite(LASER_TRIGGER_PIN, LOW);
    }

    servoX.write(posx);
    servoY.write(posY);
    
    delay(100);
}

uint8_t adjustToServoPosition(uint8_t raw) {
    return (raw*0.9)-27;
}

void initNunchuk() {
    Wire.begin();
    Wire.beginTransmissio(NUNCHUK_ADDRESS);
    Wire.write(0xF0);
    Wire.write(0x55);
    Wire.endTransmission(true);

    Wire.beginTransmissio(NUNCHUK_ADDRESS);
    Wire.write(0xFB);
    Wire.write(0x00);
    Wire.endTransmission(true);

};

nunchuk readNunchuk() {
    uint8_t nunchuk_data[6];
    uint8_t i;
    Wire.requestFrom(NUNCHUK_ADDRESS, 6);
    #ifdef SAM
        delayMicroseconds(10);
    #endif

    for (i = 0; i < 6 && Wire.available(); i++) {
        nunchuk_data[i] = Wire.read();
    }
    Wire.beginTransmission(NUNCHUK_ADDRESS);
    Wire.write(0x00);
    #ifdef SAM
        delayMicroseconds(100);
    #endif
    Wire.endTransmission(true);

    nunchuk.posX = nunchuk_data[0];
    nunchuk.posY = nunchuk_data[1];
    nunchuk.btnC = (~nunchuk_data[5] >> 1) & 1;
    nunchuk.btnZ = (~nunchuk_data[5] >> 0) & 1;
    return nunchuk;
};

